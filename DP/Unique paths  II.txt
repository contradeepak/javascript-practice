63. Unique Paths II

You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

Solution :


var uniquePathsWithObstacles = function(obstacleGrid) {
     const dp = Array.from({ length: obstacleGrid.length }, () => new Array(obstacleGrid[0].length).fill(0))
    dp[0][0] = obstacleGrid[0][0] === 0 ? 1 : 0
    for(let i = 1; i < dp[0].length; i++) {
        if (obstacleGrid[0][i] !== 1) {
            dp[0][i] = dp[0][i - 1]
        }
    }
    for (let i = 1; i < dp.length; i++) {
        for(let j = 0; j < dp[0].length; j++) {
            if (obstacleGrid[i][j] !== 1) {
                const upNum = dp[i - 1][j]
                const leftNum = j === 0 ? 0 : dp[i][j - 1]
                dp[i][j] = upNum + leftNum
            }
        }
    }
    return dp[dp.length - 1][dp[0].length - 1]
};