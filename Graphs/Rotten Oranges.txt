994. Rotting Oranges

You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.


Solution :

var orangesRotting = function(grid) {
    
    for (let i = 0; i < grid.length; i++) {
        for (let j = 0; j < grid[0].length; j++) {
            if (grid[i][j] == 2) helper (i, j, 2)            
        }
    }

    time = 0

    for (let i = 0; i < grid.length; i++) {
        for (let j = 0; j < grid[0].length; j++) {
            if (grid[i][j] == 1) return -1
            time = Math.max(grid[i][j] - 2, time)
        }
    }

    function helper (x, y, step) {        
        if (x < 0 || y < 0 || x >= grid.length || y >= grid[0].length) return 
        if (grid[x][y] == 0 || (grid[x][y] > 1 && grid[x][y] < step)) return 

        grid[x][y] = step
        
        helper (x+1, y, step+1)
        helper (x-1, y, step+1)
        helper (x, y+1, step+1)
        helper (x, y-1, step+1)
    }

    return time
};