239. Sliding Window Maximum

You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7


 Solution:

 var maxSlidingWindow = function(nums, k) {
    const res = [];
  const q = []; // keep the current max index in array, desc
  const n = nums.length;

  for (let i = 0; i < n; i++) {
    // remove smaller tail indexes in queue
    while (q.length > 0 && nums[i] > nums[q[q.length - 1]]) {
      q.pop();
    }
    q.push(i);

    // check current max is in range K
    if (q[0] <= i - k) {
      q.shift();
    }

    // calc result
    if (i >= k - 1) {
      res.push(nums[q[0]]);
    }
  }

  return res;
};